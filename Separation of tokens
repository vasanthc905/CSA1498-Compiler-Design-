%{
#include <stdio.h>
%}

%%
"#include"         { printf("<Preprocessor directive>\t%s\n", yytext); }
"int"|"void"       { printf("<Keyword>\t\t\t%s\n", yytext); }
"printf"           { printf("<Function call>\t\t%s\n", yytext); }
"main"             { printf("<Main function>\t\t%s\n", yytext); }
[a-zA-Z_][a-zA-Z0-9_]*   { printf("<Identifier>\t\t%s\n", yytext); }
[0-9]+             { printf("<Constant>\t\t\t%s\n", yytext); }
"="                { printf("<Assignment operator>\t%s\n", yytext); }
"+"|"-"|"*"|"/"     { printf("<Arithmetic operator>\t%s\n", yytext); }
";"                { printf("<Semicolon>\t\t%s\n", yytext); }
","                { printf("<Comma>\t\t\t%s\n", yytext); }
"("                { printf("<Left parenthesis>\t%s\n", yytext); }
")"                { printf("<Right parenthesis>\t%s\n", yytext); }
"{"                { printf("<Left brace>\t\t%s\n", yytext); }
"}"                { printf("<Right brace>\t\t%s\n", yytext); }
[ \t\n]            { /* ignore whitespace */ }
.                  { printf("<Unknown token>\t\t%s\n", yytext); }
%%

int main() {
    printf("Lexical Analysis Starting...\n");
    yylex();  // Begin the lexical analysis
    printf("Lexical Analysis Finished.\n");
    return 0;
}
